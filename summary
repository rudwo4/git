
----- 에러 -----------
1) Oracle Driver 에러
 - context.xml 문법 확인
 - servlet-context.xml의 검색할 resource name이 일치하는지 확인
 	<beans:property name="jndiName" value = "java:comp/env/jdbc/Oracle11g" />
 - ojdbc6.jar 파일을 C:\Program Files\Java\jdk1.8.0_201\jre\lib\ext 에 붙여넣는다.
 - sql developer에 계정, 테이블이 존재하는지 확인

2) mapper 오류
  - namespace 확인 (dao 인터페이스)
  <mapper namespace="spring.mvc.member_mybatis.persistence.MemberDAO">

  </mapper>    

3) 빌드 오류 시 이클립스 종료 후 .m2 삭제 후 이클립스 실행 후 빌드

4) 기타 플젝은 close project 해야 한다. 
      서버 탭> Tomcat 우클립 > Add And Remove > 오른쪽 패키지들을 remove
    
5) 플젝 복사한 경우 context 중복을 피하기 위해   
   web project settings > context root 변경  
 -------------------- 

1. Servers > Tomcat v8.5 Server at localhost-config > context.xml에 커넥션풀 추가
<Resource auth="Container"
   		name="jdbc/Oracle11g"	
   		driverClassName="oracle.jdbc.driver.OracleDriver"
   		type="javax.sql.DataSource"
   		url="jdbc:oracle:thin:@localhost:1521:xe"
   		maxActive="1"
   		maxWait="1000"
   		username="jsp"
   		password="tiger"
   	/> 
   	
 2. 프로젝트 생성 > new spring Legacy Project > 프로젝트명 입력, spring MVC Project 선택 > 
 	패키지명(3레벨 이상) 입력 
 	
 	패키지명(3레벨 이상) 입력은 반드시 3레벨 이상을 해야 하며, 3레벨이 컨텍스트명이 된다.
 	
 3. web.xml에 한글 안깨지도록 처리
 
	<!-- 한글 안깨지게 처리 시작  -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter> 	
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 한글 안깨지게 처리 종료  -->
	
 4. spring_mvcBoard_Mybatis 패키지에 controller, service, persistence, vo 폴더 생성 후
 작성하거나 복사
 4-1. 컨트롤러 클래스 작성(JSP의 서블릿이 아님)
 	new > class > MemberController
 	
 	@Controller 추가
 	클래스명
 	@Autowrired추가
 	MemberService service;
 	
 	@RequestMapping 추가
 4-2. 컨트롤러 - main / jsp - main.jsp
 	  JSP 소스 추가 , js와 css는 src/main/resources에 붙여넣는다.
 	  setting.jsp에 경로 수정
 	  jsp소스에서 이동 url의 .do는 뺀다.
 	  
 	  http://localhost/member_mybatis/main 실행해서 css가 적용됐는지 확인
 	  
 	    컨트롤러 순서대로 작업
 	    자바스크립트 confrimId.do의 do 삭제 후 컨트롤러 추가
 	    
 4-3. 서비스 클래스 작성
 	ㄱ.@Service 추가
 	
 	ㄴ.클래스,인터페이스는  JSP에서 복사해서 가져온다.
 	   패키지들을 수정한다.
 	   
 	ㄷ.인터페이스는 해당 메소드 제외한 나머지는 주석 처리
 	클래스는 해당 메소드 제외한 나머지는 주석처리
 	
 	ㄹ. 매개변수에 Model model을 추가한다 
 	@Service
	public class boardServiceImpl implements MemberService {
	
		@Autowired  // @Inject와 동일
		MemberDAO dao;
		
		@Override
		public void confirmId(HttpServletRequest req, Model model) {	
			
			model.addAttribute("selectCnt", cnt);
			model.addAttribute("id", strId);
 	}
 4-4. DAO 클래스 작성
 	@Repository 추가
 	클래스,인터페이스는 JSP에서 복사해서 가져온다.
 	
 	인터페이스는 해당 메소드 제외한 나머지는 주석 처리
 	클래스는 해당 메소드 제외한 나머지는 주석처리 	    
 	  	
 4-5. Mybatis 설정	
 
 1) 자바 설정
 project 우클릭 => properties > java Build Path 탭 > Edit 버튼
 세번째 Workspace default JRE(jre1.8.0_201) 선택
 
 project 우클릭 => properties > Project Facets > Java를 1.8로 변경
 				Runtime탭에서 Apach Tomcat v8.5 선택
 
 ***
 2) pom.xml에 버전 설정		
 http://spring.io/projects/spring-framework에서 스프링 버전 확인
 현재 5.1.8
 
 3) pom.xml에 Mybatis jar 파일 설정
 	3-1. mvnrepository.com에서 4개의 라이브러리를 복사 후 pom.xml에 등록 하면,
 	maven 중앙 repository로 부터 다운로드 후 빌드되어 Maven Dependencies(.m2.repository)에 저장된다.
 	
 	mybatis-spring, spring-jdbc, mybatis, spring-test 추가
 	
 	<!-- Mybatis-spring 설정 시작 -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis-spring</artifactId>
		    <version>1.3.2</version>
		</dependency>
		<!-- Mybatis-spring 설정 종료 -->
		
		<!-- jdbc 설정 시작 -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-jdbc</artifactId>
		    <version>5.1.8.RELEASE</version>
		</dependency>
		<!-- jdbc 설정 종료 -->
		
		<!-- Mybatis 설정 시작 -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis</artifactId>
		    <version>3.4.6</version>
		</dependency>
		<!-- Mybatis 설정 종료 -->
		
		<!-- spring-test 설정 시작 -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-test</artifactId>
		    <version>5.1.8.RELEASE</version>
		</dependency>
		<!-- spring-test 설정 종료 -->
		
5. Mapper 패키지 작성
	src/main/resources 폴더에 package 작성 : 
	우클릭 > new > package > member_mybatis.mapper
	
6. servlet-context.xml에 mybatis 설정 추가
	<!-- Mybatis 설정 시작 -->
	<beans:bean name = "dataSource" class ="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value = "java:comp/env/jdbc/Oracle11g" />
		<beans:property name="resourceRef" value = "true" />
	</beans:bean>
	
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref = "dataSource"></beans:property>
		<beans:property name="mapperLocations" value = "classpath:member_Mybatis/mapper/*.xml" />
	</beans:bean>
	
	<beans:bean id ="sqlSession" class = "org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref ="sqlSessionFactory"/>
	</beans:bean>
	<!-- Mybatis 설정 종료 -->
	
7. Mapper 작성 - 패키지 위 우클릭
	1) new > other > xml file > memberMapper.xml 생성	
	
	2) mybatis.org > products > 왼쪽 Mybatis3의 docs링크 클릭 > 
	   왼쪽 메뉴 : Configuration XML > 중간부분 objectFactory 위 소스에서 맨위 3줄 복사
	   
	<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
    --> mebmerMapper.xml에 붙여 넣는다.